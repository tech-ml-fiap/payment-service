
name: CI/CD Payment Service
on:
  push:
    branches: [main, master]


env:
  AWS_REGION: us-east-1
  ECR_REPO:  payment-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:            ${{ env.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v2

    # ---------- Build & push ----------
    - name: Build and Push image
      id: build
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPO 2>/dev/null \
          || aws ecr create-repository --repository-name $ECR_REPO --image-tag-mutability MUTABLE

        IMAGE_URI=$(aws ecr describe-repositories --repository-names $ECR_REPO \
                    --query 'repositories[0].repositoryUri' --output text)

        docker build -t $IMAGE_URI:${{ github.sha }} .
        docker push     $IMAGE_URI:${{ github.sha }}

        echo "IMAGE_URI=$IMAGE_URI:${{ github.sha }}"   >> $GITHUB_ENV
        echo "APP_VERSION=${{ github.sha }}"            >> $GITHUB_ENV

    # ---------- Gera Dockerrun.zip ----------
    - name: Generate Dockerrun & Zip
      run: |
        IMAGE_URI=$(echo ${{ env.IMAGE_URI }})
        
        cat > Dockerrun.aws.json <<EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": { "Name": "$IMAGE_URI", "Update": "true" },
          "Ports": [ { "ContainerPort": "8000" } ]
        }
        EOF
        
        zip -q deploy.zip Dockerrun.aws.json
        echo "ZIP_PATH=$(pwd)/deploy.zip" >> $GITHUB_ENV

    # ---------- Terraform ----------
    - uses: hashicorp/setup-terraform@v3
      with: { terraform_version: 1.6.5 }

    - name: Terraform Init
      working-directory: infra
      run: terraform init -input=false

    - name: Importar recursos se jÃ¡ existirem
      working-directory: infra
      shell: bash
      run: |
        set -euo pipefail
        set -x                          

        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region us-east-1)
        BUCKET="payment-service-artifacts-${ACCOUNT_ID}"

        # ---------- AplicaÃ§Ã£o EB ----------
        if aws elasticbeanstalk describe-applications \
             --application-names payment-service \
             --query 'Applications[0].ApplicationName' --output text \
             --region us-east-1 >/dev/null 2>&1; then

          terraform state list | grep -q '^aws_elastic_beanstalk_application\.app$' \
            || terraform import aws_elastic_beanstalk_application.app payment-service
        fi

        # ---------- Bucket ----------
        if aws s3api head-bucket --bucket "$BUCKET" --region us-east-1 2>/dev/null; then
          terraform state list | grep -q '^aws_s3_bucket\.artifacts$' \
            || terraform import aws_s3_bucket.artifacts "$BUCKET"
        fi
    

    - name: Terraform Apply
      working-directory: infra
      run: |
        terraform apply -auto-approve -input=false \
          -var="app_version=${{ github.sha }}" \
          -var="artifact_zip=${ZIP_PATH}"

    - name: Show URL
      working-directory: infra
      run: echo "ðŸŸ¢ URL -> $(terraform output -raw service_url)"
